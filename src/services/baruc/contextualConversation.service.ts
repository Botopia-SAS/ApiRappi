// src/services/baruc/contextualConversation.service.ts
import { GeminiService } from '../thirtparty/gemini.service';
import { IntentResponse } from './intentProcessor.service';

export interface ConversationContext {
  chatId: string;
  messages: Array<{
    timestamp: number;
    sender: 'user' | 'bot';
    content: string;
    intent?: IntentResponse;
  }>;
  currentState: 'idle' | 'processing_intent' | 'waiting_data' | 'executing';
  currentIntent?: IntentResponse;
  waitingFor?: string;
  lastActiveTime: number;
  sessionId: string;
}

export class ContextualConversationService {
  private contexts = new Map<string, ConversationContext>();
  private readonly CONTEXT_TIMEOUT = 30 * 60 * 1000; // 30 minutos
  private readonly MAX_CONTEXT_MESSAGES = 10;

  constructor(private gemini: GeminiService) {
    // Limpiar contextos expirados cada 5 minutos
    setInterval(() => this.cleanExpiredContexts(), 5 * 60 * 1000);
  }

  async processMessage(chatId: string, userMessage: string): Promise<string | null> {
    console.log(`üß† Procesando mensaje contextual: "${userMessage}"`);
    
    // Obtener o crear contexto
    let context = this.getOrCreateContext(chatId);
    
    // Agregar mensaje del usuario al contexto
    this.addMessageToContext(context, 'user', userMessage);
    
    // Analizar la conversaci√≥n completa con IA
    const analysis = await this.analyzeConversationWithAI(context);
    console.log(`üéØ An√°lisis de conversaci√≥n:`, analysis);
    
    // Procesar seg√∫n el an√°lisis
    const response = await this.processAnalysis(context, analysis);
    
    if (response) {
      // Agregar respuesta del bot al contexto
      this.addMessageToContext(context, 'bot', response);
    }
    
    return response;
  }

  private getOrCreateContext(chatId: string): ConversationContext {
    let context = this.contexts.get(chatId);
    
    if (!context || this.isContextExpired(context)) {
      context = {
        chatId,
        messages: [],
        currentState: 'idle',
        lastActiveTime: Date.now(),
        sessionId: `${chatId}-${Date.now()}`
      };
      this.contexts.set(chatId, context);
      console.log(`üÜï Nuevo contexto creado para ${chatId}`);
    } else {
      context.lastActiveTime = Date.now();
    }
    
    return context;
  }

  private addMessageToContext(context: ConversationContext, sender: 'user' | 'bot', content: string, intent?: IntentResponse) {
    context.messages.push({
      timestamp: Date.now(),
      sender,
      content,
      intent
    });
    
    // Mantener solo los √∫ltimos N mensajes
    if (context.messages.length > this.MAX_CONTEXT_MESSAGES) {
      context.messages = context.messages.slice(-this.MAX_CONTEXT_MESSAGES);
    }
    
    console.log(`üí¨ Mensaje agregado al contexto (${context.messages.length} mensajes total)`);
  }

  private async analyzeConversationWithAI(context: ConversationContext): Promise<{
    intent: IntentResponse;
    needsMoreInfo: boolean;
    missingField?: string;
    shouldExecute: boolean;
    contextSummary: string;
  }> {
    // Construir historial de conversaci√≥n
    const conversationHistory = context.messages
      .map(msg => `${msg.sender}: ${msg.content}`)
      .join('\n');
    
    const prompt = `
Eres un analista experto de conversaciones para un asistente de datos de Rappi llamado Baruc.

ANALIZA esta conversaci√≥n completa y determina:
1. La intenci√≥n del usuario
2. Si necesita m√°s informaci√≥n
3. Si est√° listo para ejecutar la acci√≥n

INTENCIONES DISPONIBLES:
- "graficas": Generar gr√°ficas/charts (requiere: variable [ordenes/gastos], periodo [1-4 semanas M√ÅXIMO])
- "mltv": An√°lisis de multiverticalidad (requiere: tipo_reporte [semanal/mensual])
- "op_zones": An√°lisis de zonas operativas (requiere: tipo_reporte [semanal/mensual])
- "saludo": Solo saluda o conversaci√≥n casual
- "desconocido": No se puede determinar

IMPORTANTE PARA GR√ÅFICAS:
- El per√≠odo m√°ximo disponible es 4 semanas
- Si el usuario pide m√°s de 4 semanas, autom√°ticamente limitarlo a 4
- El per√≠odo es acumulativo (incluye hoy, ayer y las semanas hacia atr√°s)

CONVERSACI√ìN:
${conversationHistory}

CONTEXTO ACTUAL:
- Estado: ${context.currentState}
- Intenci√≥n previa: ${JSON.stringify(context.currentIntent || {})}
- Esperando: ${context.waitingFor || 'nada'}

REGLAS DE AN√ÅLISIS:
1. Si el usuario menciona "gr√°ficas", "gr√°fica", "graficas" + "√≥rdenes"/"gastos" ‚Üí intenci√≥n "graficas"
2. Si falta informaci√≥n, identificar qu√© campo espec√≠fico falta
3. Si toda la informaci√≥n est√° completa, marcar shouldExecute como true
4. Mantener contexto de mensajes anteriores en la misma conversaci√≥n
5. Si el usuario saluda al inicio, responder el saludo pero estar atento a la siguiente solicitud
6. Para gr√°ficas: periodo m√°ximo 4 semanas, si pide m√°s ‚Üí limitarlo autom√°ticamente

FORMATO DE RESPUESTA (JSON):
{
  "intent": {
    "intencion": "graficas|mltv|op_zones|saludo|desconocido",
    "variable": "ordenes|gastos|null",
    "periodo": "n√∫mero(1-4)|null",
    "tipo_reporte": "semanal|mensual|null"
  },
  "needsMoreInfo": true|false,
  "missingField": "variable|periodo|tipo_reporte|null",
  "shouldExecute": true|false,
  "contextSummary": "Resumen breve de lo que el usuario quiere"
}

EJEMPLOS:
Usuario: "Hola" ‚Üí {"intent":{"intencion":"saludo"},"needsMoreInfo":false,"shouldExecute":true,"contextSummary":"Usuario saluda"}
Usuario anterior: "Hola", Ahora: "Gr√°ficas de √≥rdenes" ‚Üí {"intent":{"intencion":"graficas","variable":"ordenes","periodo":null},"needsMoreInfo":true,"missingField":"periodo","shouldExecute":false,"contextSummary":"Usuario quiere gr√°ficas de √≥rdenes, falta per√≠odo"}

Analiza la conversaci√≥n completa y responde SOLO con JSON v√°lido:
`;

    try {
      const response = await this.gemini.generate(prompt, { temperature: 0.2 });
      const cleanResponse = response.trim();
      
      const jsonText = cleanResponse.startsWith('```json') 
        ? cleanResponse.slice(7, -3).trim()
        : cleanResponse;
      
      return JSON.parse(jsonText);
    } catch (error) {
      console.error('‚ùå Error analizando conversaci√≥n:', error);
      return {
        intent: { intencion: 'desconocido' },
        needsMoreInfo: false,
        shouldExecute: false,
        contextSummary: 'Error en an√°lisis'
      };
    }
  }

  private async processAnalysis(context: ConversationContext, analysis: any): Promise<string | null> {
    // Actualizar el contexto con el nuevo intent
    context.currentIntent = analysis.intent;
    
    if (analysis.intent.intencion === 'saludo') {
      context.currentState = 'idle';
      return await this.generateGreeting();
    }

    if (analysis.intent.intencion === 'desconocido') {
      return 'No entend√≠ lo que necesitas. Puedo ayudarte con:\n‚Ä¢ Gr√°ficas de √≥rdenes o gastos (1-4 semanas)\n‚Ä¢ An√°lisis MLTV\n‚Ä¢ Reportes de zonas operativas\n\n¬øQu√© te gustar√≠a hacer? ü§î';
    }

    if (analysis.needsMoreInfo) {
      context.currentState = 'waiting_data';
      context.waitingFor = analysis.missingField;
      return await this.askForMissingData(analysis.intent, analysis.missingField);
    }

    if (analysis.shouldExecute) {
      context.currentState = 'executing';
      return this.generateExecutionMessage(analysis.intent);
    }

    return null;
  }

  private async generateGreeting(): Promise<string> {
    const greetings = [
      '¬°Hola! Soy Baruc, tu asistente de datos ü§ñ\nPuedo ayudarte con gr√°ficas (1-4 semanas), an√°lisis MLTV y reportes de zonas.\n¬øEn qu√© puedo ayudarte?',
      '¬°Hola! üëã Soy Baruc.\nPuedo generar gr√°ficas de √≥rdenes/gastos (1-4 semanas), an√°lisis MLTV y reportes de zonas.\n¬øQu√© necesitas?',
      'Hola! Soy Baruc, especialista en datos de Rappi üìä\n¬øTe ayudo con gr√°ficas (m√°ximo 4 semanas) o an√°lisis?'
    ];
    
    return greetings[Math.floor(Math.random() * greetings.length)];
  }

  private async askForMissingData(intent: IntentResponse, missingField: string): Promise<string> {
    const prompts = {
      variable: '¬øQu√© tipo de gr√°ficas quieres ver? üìä\n‚Ä¢ √ìrdenes\n‚Ä¢ Gastos',
      periodo: '¬øCu√°ntas semanas de datos quieres ver? üìÖ\n‚Ä¢ 1-2 semanas (reciente)\n‚Ä¢ 3-4 semanas (m√°ximo disponible)',
      tipo_reporte: intent.intencion === 'mltv' 
        ? '¬øQu√© tipo de an√°lisis MLTV necesitas? üìä\n‚Ä¢ Semanal\n‚Ä¢ Mensual'
        : '¬øQu√© tipo de reporte de zonas quieres? üó∫Ô∏è\n‚Ä¢ Semanal\n‚Ä¢ Mensual'
    };
    
    return prompts[missingField as keyof typeof prompts] || '¬øPuedes darme m√°s detalles?';
  }

  private generateExecutionMessage(intent: IntentResponse): string {
    switch (intent.intencion) {
      case 'graficas':
        const tipoTexto = intent.variable === 'ordenes' ? '√≥rdenes' : 'gastos';
        const periodoTexto = intent.periodo ? ` de ${intent.periodo} semanas` : '';
        return `Har√© las gr√°ficas de ${tipoTexto}${periodoTexto} por ti, dame un minuto üìä`;
      
      case 'mltv':
        return 'Voy a generar el an√°lisis MLTV, dame un momento... üìä';
      
      case 'op_zones':
        return 'Voy a generar el an√°lisis de zonas operativas, dame un momento... üó∫Ô∏è';
      
      default:
        return 'Procesando tu solicitud...';
    }
  }

  // M√©todos de utilidad
  getContext(chatId: string): ConversationContext | null {
    return this.contexts.get(chatId) || null;
  }

  isWaitingForData(chatId: string): boolean {
    const context = this.contexts.get(chatId);
    return context?.currentState === 'waiting_data' || false;
  }

  isExecuting(chatId: string): boolean {
    const context = this.contexts.get(chatId);
    return context?.currentState === 'executing' || false;
  }

  clearContext(chatId: string): void {
    this.contexts.delete(chatId);
    console.log(`üóëÔ∏è Contexto eliminado para ${chatId}`);
  }

  private isContextExpired(context: ConversationContext): boolean {
    return Date.now() - context.lastActiveTime > this.CONTEXT_TIMEOUT;
  }

  private cleanExpiredContexts(): void {
    const now = Date.now();
    let cleanedCount = 0;
    
    for (const [chatId, context] of this.contexts.entries()) {
      if (now - context.lastActiveTime > this.CONTEXT_TIMEOUT) {
        this.contexts.delete(chatId);
        cleanedCount++;
      }
    }
    
    if (cleanedCount > 0) {
      console.log(`üßπ Limpiados ${cleanedCount} contextos expirados`);
    }
  }

  // M√©todos de compatibilidad
  isAnalyzingMLTV(chatId: string): boolean {
    const context = this.contexts.get(chatId);
    return context?.currentIntent?.intencion === 'mltv' && context.currentState === 'executing';
  }

  isAnalyzingOpZones(chatId: string): boolean {
    const context = this.contexts.get(chatId);
    return context?.currentIntent?.intencion === 'op_zones' && context.currentState === 'executing';
  }

  clearMLTVState(chatId: string): void {
    const context = this.contexts.get(chatId);
    if (context && context.currentIntent?.intencion === 'mltv') {
      context.currentState = 'idle';
      context.currentIntent = undefined;
      context.waitingFor = undefined;
    }
  }

  clearOpZonesState(chatId: string): void {
    const context = this.contexts.get(chatId);
    if (context && context.currentIntent?.intencion === 'op_zones') {
      context.currentState = 'idle';
      context.currentIntent = undefined;
      context.waitingFor = undefined;
    }
  }

  hasState(chatId: string): boolean {
    const context = this.contexts.get(chatId);
    return context ? context.currentState !== 'idle' : false;
  }
}